---@meta
---@alias cjson.null lightuserdata
---@alias json boolean | number | string | cjson.null | json[] | {[string]: json}
---@alias setting 'null' | boolean
---@alias precision 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14
---[cjson library](https://redis.io/docs/latest/develop/interact/programmability/lua-api#cjson-library)
---* Since version: 2.6.0
---* Available in scripts: yes
---* Available in functions: yes
---
---The _cjson_ library provides fast [JSON](https://json.org) encoding and decoding from Lua.
---It provides these functions.
---@class cjson
cjson = {
	---[cjson._NAME](https://kyne.au/~mark/software/lua-cjson-manual.html#_name)
	---
	---The name of the Lua CJSON module ("cjson").
	_NAME = 'cjson',
	---[cjson._VERSION](https://kyne.au/~mark/software/lua-cjson-manual.html#_version)
	---
	---The version number of the Lua CJSON module ("2.1devel").
	---@type string
	_VERSION = '',
	---[cjson.null](https://kyne.au/~mark/software/lua-cjson-manual.html#_null)
	---
	---Lua CJSON decodes JSON null as a Lua lightuserdata NULL pointer.
	---cjson.null is provided for comparison.
	---@type lightuserdata
	null = {},
	---[cjson.decode](https://kyne.au/~mark/software/lua-cjson-manual.html#_decode)
	---
	---cjson.decode will deserialise any UTF-8 JSON string into a Lua value or
	---table.
	---
	---UTF-16 and UTF-32 JSON strings are not supported.
	---
	---cjson.decode requires that any NULL (ASCII 0) and double quote (ASCII
	---34) characters are escaped within strings. All escape codes will be
	---decoded and other bytes will be passed transparently. UTF-8 characters
	---are not validated during decoding and should be checked elsewhere if
	---required.
	---
	---JSON null will be converted to a NULL lightuserdata value. This can be
	---compared with cjson.null for convenience.
	---
	---By default, numbers incompatible with the JSON specification (infinity,
	---NaN, hexadecimal) can be decoded. This default can be changed with
	---[cjson.decode_invalid_numbers](lua://cjson.decode_invalid_numbers).
	---
	---<div class="formalpara-title">
	---
	---**Example: Decoding**
	---
	---</div>
	---
	---``` lua
	---json_text = '[ true, { "foo": "bar" } ]'
	---value = cjson.decode(json_text)
	----- Returns: { true, { foo = "bar" } }
	---```
	---
	---<div class="caution">
	---
	---Care must be taken after decoding JSON objects with numeric keys. Each
	---numeric key will be stored as a Lua string. Any subsequent code assuming
	---type number may break.
	---
	---</div>
	---@param json_text string
	---@return json
	---@nodiscard
	decode = function(json_text) end,
	---[cjson.decode_invalid_numbers](https://kyne.au/~mark/software/lua-cjson-manual.html#decode_invalid_numbers)
	---
	---Lua CJSON may generate an error when trying to decode numbers not
	---supported by the JSON specification. *Invalid numbers* are defined as:
	---
	---- infinity
	---
	---- NaN
	---
	---- hexadecimal
	---
	---Available settings:
	---
	---true<br>
	---Accept and decode *invalid numbers*. This is the default setting.
	---
	---false<br>
	---Throw an error when *invalid numbers* are encountered.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---@return boolean
	---@nodiscard
	decode_invalid_numbers = function() end,
	---[cjson.decode_max_depth](https://kyne.au/~mark/software/lua-cjson-manual.html#decode_max_depth)
	---
	---Lua CJSON will generate an error when parsing deeply nested JSON once
	---the maximum array/object depth has been exceeded. This check prevents
	---unnecessarily complicated JSON from slowing down the application, or
	---crashing the application due to lack of process stack space.
	---
	---An error may be generated before the depth limit is hit if Lua is unable
	---to allocate more objects on the Lua stack.
	---
	---By default, Lua CJSON will reject JSON with arrays and/or objects nested
	---more than 1000 levels deep.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---@return integer
	---@nodiscard
	decode_max_depth = function() end,
	---[cjson.encode](https://kyne.au/~mark/software/lua-cjson-manual.html#encode)
	---
	---cjson.encode will serialise a Lua value into a string containing the
	---JSON representation.
	---
	---cjson.encode supports the following types:
	---
	----   boolean
	---
	----   lightuserdata (NULL value only)
	---
	----   nil
	---
	----   number
	---
	----   string
	---
	----   table
	---
	---The remaining Lua types will generate an error:
	---
	----   function
	---
	----   lightuserdata (non-NULL values)
	---
	----   thread
	---
	----   userdata
	---
	---By default, numbers are encoded with 14 significant digits. Refer to
	---[cjson.encode_number_precision](lua://cjson.encode_number_precision) for details.
	---
	---Lua CJSON will escape the following characters within each UTF-8 string:
	---
	----   Control characters (ASCII 0 - 31)
	---
	----   Double quote (ASCII 34)
	---
	----   Forward slash (ASCII 47)
	---
	----   Blackslash (ASCII 92)
	---
	----   Delete (ASCII 127)
	---
	---All other bytes are passed transparently.
	---
	---<div class="caution">
	---
	---Lua CJSON will successfully encode/decode binary strings, but this is
	---technically not supported by JSON and may not be compatible with other
	---JSON libraries. To ensure the output is valid JSON, applications should
	---ensure all Lua strings passed to cjson.encode are UTF-8.
	---
	---Base64 is commonly used to encode binary data as the most efficient
	---encoding under UTF-8 can only reduce the encoded size by a further \~8%.
	---Lua Base64 routines can be found in the
	---[LuaSocket](https://w3.impa.br/%7Ediego/software/luasocket) and
	---[lbase64](https://web.tecgraf.puc-rio.br/%7Elhf/ftp/lua#lbase64)
	---packages.
	---
	---</div>
	---
	---Lua CJSON uses a heuristic to determine whether to encode a Lua table as
	---a JSON array or an object. A Lua table with only positive integer keys
	---of type number will be encoded as a JSON array. All other tables will be
	---encoded as a JSON object.
	---
	---Lua CJSON does not use metamethods when serialising tables.
	---
	----   rawget is used to iterate over Lua arrays
	---
	----   next is used to iterate over Lua objects
	---
	---Lua arrays with missing entries (*sparse arrays*) may optionally be
	---encoded in several different ways. Refer to
	---[cjson.encode_sparse_array](lua://cjson.encode_sparse_array) for details.
	---
	---JSON object keys are always strings. Hence cjson.encode only supports
	---table keys which are type number or string. All other types will
	---generate an error.
	---
	---<div class="note">
	---
	---Standards compliant JSON must be encapsulated in either an object ({})
	---or an array (\[\]). If strictly standards compliant JSON is desired, a
	---table must be passed to cjson.encode.
	---
	---</div>
	---
	---By default, encoding the following Lua values will generate errors:
	---
	----   Numbers incompatible with the JSON specification (infinity, NaN)
	---
	----   Tables nested more than 1000 levels deep
	---
	----   Excessively sparse Lua arrays
	---
	---These defaults can be changed with:
	---
	----   [cjson.encode_invalid_numbers](lua://cjson.encode_invalid_numbers)
	---
	----   [cjson.encode_max_depth](lua://cjson.encode_max_depth)
	---
	----   [cjson.encode_sparse_array](lua://cjson.encode_sparse_array)
	---
	---<div class="formalpara-title">
	---
	---**Example: Encoding**
	---
	---</div>
	---
	---``` lua
	---value = { true, { foo = "bar" } }
	---json_text = cjson.encode(value)
	----- Returns: '[true,{"foo":"bar"}]'
	---```
	---@param value json?
	---@return string
	---@nodiscard
	encode = function(value) end,
	---[cjson.encode_invalid_numbers](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_invalid_numbers)
	---
	---Lua CJSON may generate an error when encoding floating point numbers not
	---supported by the JSON specification (*invalid numbers*):
	---
	---- infinity
	---
	---- NaN
	---
	---Available settings:
	---
	---true<br>
	---Allow *invalid numbers* to be encoded using the Javascript compatible
	---values NaN and Infinity. This will generate non-standard JSON, but these
	---values are supported by some libraries.
	---
	---"null"<br>
	---Encode *invalid numbers* as a JSON null value. This allows infinity and
	---NaN to be encoded into valid JSON.
	---
	---false<br>
	---Throw an error when attempting to encode *invalid numbers*. This is the
	---default setting.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---@return setting
	---@nodiscard
	encode_invalid_numbers = function() end,
	---[cjson.encode_keep_buffer](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_keep_buffer)
	---
	---Lua CJSON can reuse the JSON encoding buffer to improve performance.
	---
	---Available settings:
	---
	---true<br>
	---The buffer will grow to the largest size required and is not freed until
	---the Lua CJSON module is garbage collected. This is the default setting.
	---
	---false<br>
	---Free the encode buffer after each call to cjson.encode.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---@return boolean
	---@nodiscard
	encode_keep_buffer = function() end,
	---[cjson.encode_max_depth](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_max_depth)
	---
	---Once the maximum table depth has been exceeded Lua CJSON will generate
	---an error. This prevents a deeply nested or recursive data structure from
	---crashing the application.
	---
	---By default, Lua CJSON will generate an error when trying to encode data
	---structures with more than 1000 nested tables.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---
	---<div class="formalpara-title">
	---
	---**Example: Recursive Lua table**
	---
	---</div>
	---
	---``` lua
	---a = {}; a[1] = a
	---```
	---@return integer
	---@nodiscard
	encode_max_depth = function() end,
	---[cjson.encode_number_precision](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_number_precision)
	---
	---The amount of significant digits returned by Lua CJSON when encoding
	---numbers can be changed to balance accuracy versus performance. For data
	---structures containing many numbers, setting
	---cjson.encode_number_precision to a smaller integer, for example 3, can
	---improve encoding performance by up to 50%.
	---
	---By default, Lua CJSON will output 14 significant digits when converting
	---a number to text.
	---
	---The current setting is always returned, and is only updated when an
	---argument is provided.
	---@return precision
	---@nodiscard
	encode_number_precision = function() end,
	---[cjson.encode_sparse_array](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_sparse_array)
	---
	---Lua CJSON classifies a Lua table into one of three kinds when encoding a
	---JSON array. This is determined by the number of values missing from the
	---Lua array as follows:
	---
	---Normal<br>
	---All values are available.
	---
	---Sparse<br>
	---At least 1 value is missing.
	---
	---Excessively sparse<br>
	---The number of values missing exceeds the configured ratio.
	---
	---Lua CJSON encodes sparse Lua arrays as JSON arrays using JSON null for
	---the missing entries.
	---
	---An array is excessively sparse when all the following conditions are
	---met:
	---
	---- ratio \> 0
	---
	---- *maximum_index* \> safe
	---
	---- *maximum_index* \> *item_count* \* ratio
	---
	---Lua CJSON will never consider an array to be *excessively sparse* when
	---ratio = 0. The safe limit ensures that small Lua arrays are always
	---encoded as sparse arrays.
	---
	---By default, attempting to encode an *excessively sparse* array will
	---generate an error. If convert is set to true, *excessively sparse*
	---arrays will be converted to a JSON object.
	---
	---The current settings are always returned. A particular setting is only
	---changed when the argument is provided (non-nil).
	---
	---<div class="formalpara-title">
	---
	---**Example: Encoding a sparse array**
	---
	---</div>
	---
	---``` lua
	---cjson.encode({ [3] = "data" })
	----- Returns: '[null,null,"data"]'
	---```
	---
	---<div class="formalpara-title">
	---
	---**Example: Enabling conversion to a JSON object**
	---
	---</div>
	---
	---``` lua
	---cjson.encode_sparse_array(true)
	---cjson.encode({ [1000] = "excessively sparse" })
	----- Returns: '{"1000":"excessively sparse"}'
	---```
	---@return boolean, integer, integer
	---@nodiscard
	encode_sparse_array = function() end,
}
---[cjson.decode_invalid_numbers](https://kyne.au/~mark/software/lua-cjson-manual.html#decode_invalid_numbers)
---
---Lua CJSON may generate an error when trying to decode numbers not
---supported by the JSON specification. *Invalid numbers* are defined as:
---
---- infinity
---
---- NaN
---
---- hexadecimal
---
---Available settings:
---
---true<br>
---Accept and decode *invalid numbers*. This is the default setting.
---
---false<br>
---Throw an error when *invalid numbers* are encountered.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---@param setting boolean
---@return boolean
cjson.decode_invalid_numbers = function(setting) end
---[cjson.decode_max_depth](https://kyne.au/~mark/software/lua-cjson-manual.html#decode_max_depth)
---
---Lua CJSON will generate an error when parsing deeply nested JSON once
---the maximum array/object depth has been exceeded. This check prevents
---unnecessarily complicated JSON from slowing down the application, or
---crashing the application due to lack of process stack space.
---
---An error may be generated before the depth limit is hit if Lua is unable
---to allocate more objects on the Lua stack.
---
---By default, Lua CJSON will reject JSON with arrays and/or objects nested
---more than 1000 levels deep.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---@param depth integer must be positive
---@return integer
cjson.decode_max_depth = function(depth) end
---[cjson.encode_invalid_numbers](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_invalid_numbers)
---
---Lua CJSON may generate an error when encoding floating point numbers not
---supported by the JSON specification (*invalid numbers*):
---
---- infinity
---
---- NaN
---
---Available settings:
---
---true<br>
---Allow *invalid numbers* to be encoded using the Javascript compatible
---values NaN and Infinity. This will generate non-standard JSON, but these
---values are supported by some libraries.
---
---"null"<br>
---Encode *invalid numbers* as a JSON null value. This allows infinity and
---NaN to be encoded into valid JSON.
---
---false<br>
---Throw an error when attempting to encode *invalid numbers*. This is the
---default setting.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---@param setting setting
---@return setting
cjson.encode_invalid_numbers = function(setting) end
---[cjson.encode_keep_buffer](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_keep_buffer)
---
---Lua CJSON can reuse the JSON encoding buffer to improve performance.
---
---Available settings:
---
---true<br>
---The buffer will grow to the largest size required and is not freed until
---the Lua CJSON module is garbage collected. This is the default setting.
---
---false<br>
---Free the encode buffer after each call to cjson.encode.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---@param keep boolean
---@return boolean
cjson.encode_keep_buffer = function(keep) end
---[cjson.encode_max_depth](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_max_depth)
---
---Once the maximum table depth has been exceeded Lua CJSON will generate
---an error. This prevents a deeply nested or recursive data structure from
---crashing the application.
---
---By default, Lua CJSON will generate an error when trying to encode data
---structures with more than 1000 nested tables.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---
---<div class="formalpara-title">
---
---**Example: Recursive Lua table**
---
---</div>
---
---``` lua
---a = {}; a[1] = a
---```
---@param depth integer must be positive
---@return integer
cjson.encode_max_depth = function(depth) end
---[cjson.encode_number_precision](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_number_precision)
---
---The amount of significant digits returned by Lua CJSON when encoding
---numbers can be changed to balance accuracy versus performance. For data
---structures containing many numbers, setting
---cjson.encode_number_precision to a smaller integer, for example 3, can
---improve encoding performance by up to 50%.
---
---By default, Lua CJSON will output 14 significant digits when converting
---a number to text.
---
---The current setting is always returned, and is only updated when an
---argument is provided.
---@param precision precision
---@return precision
cjson.encode_number_precision = function(precision) end
---[cjson.encode_sparse_array](https://kyne.au/~mark/software/lua-cjson-manual.html#encode_sparse_array)
---
---Lua CJSON classifies a Lua table into one of three kinds when encoding a
---JSON array. This is determined by the number of values missing from the
---Lua array as follows:
---
---Normal<br>
---All values are available.
---
---Sparse<br>
---At least 1 value is missing.
---
---Excessively sparse<br>
---The number of values missing exceeds the configured ratio.
---
---Lua CJSON encodes sparse Lua arrays as JSON arrays using JSON null for
---the missing entries.
---
---An array is excessively sparse when all the following conditions are
---met:
---
---- ratio \> 0
---
---- *maximum_index* \> safe
---
---- *maximum_index* \> *item_count* \* ratio
---
---Lua CJSON will never consider an array to be *excessively sparse* when
---ratio = 0. The safe limit ensures that small Lua arrays are always
---encoded as sparse arrays.
---
---By default, attempting to encode an *excessively sparse* array will
---generate an error. If convert is set to true, *excessively sparse*
---arrays will be converted to a JSON object.
---
---The current settings are always returned. A particular setting is only
---changed when the argument is provided (non-nil).
---
---<div class="formalpara-title">
---
---**Example: Encoding a sparse array**
---
---</div>
---
---``` lua
---cjson.encode({ [3] = "data" })
----- Returns: '[null,null,"data"]'
---```
---
---<div class="formalpara-title">
---
---**Example: Enabling conversion to a JSON object**
---
---</div>
---
---``` lua
---cjson.encode_sparse_array(true)
---cjson.encode({ [1000] = "excessively sparse" })
----- Returns: '{"1000":"excessively sparse"}'
---```
---@param convert boolean
---@param ratio integer? must be positive
---@param safe integer? must be positive
---@return boolean, integer, integer
cjson.encode_sparse_array = function(convert, ratio, safe) end